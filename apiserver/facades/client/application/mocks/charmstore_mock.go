// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/application (interfaces: State)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	application "github.com/juju/juju/apiserver/facades/client/application"
	controller "github.com/juju/juju/controller"
	state "github.com/juju/juju/state"
	charm_v6 "gopkg.in/juju/charm.v6"
	mgo_v2 "gopkg.in/mgo.v2"
	reflect "reflect"
)

// MockState is a mock of State interface
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method
func (m *MockState) ControllerConfig() (controller.Config, error) {
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig
func (mr *MockStateMockRecorder) ControllerConfig() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockState)(nil).ControllerConfig))
}

// Model mocks base method
func (m *MockState) Model() (application.StateModel, error) {
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(application.StateModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Model indicates an expected call of Model
func (mr *MockStateMockRecorder) Model() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockState)(nil).Model))
}

// ModelUUID mocks base method
func (m *MockState) ModelUUID() string {
	ret := m.ctrl.Call(m, "ModelUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ModelUUID indicates an expected call of ModelUUID
func (mr *MockStateMockRecorder) ModelUUID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelUUID", reflect.TypeOf((*MockState)(nil).ModelUUID))
}

// MongoSession mocks base method
func (m *MockState) MongoSession() *mgo_v2.Session {
	ret := m.ctrl.Call(m, "MongoSession")
	ret0, _ := ret[0].(*mgo_v2.Session)
	return ret0
}

// MongoSession indicates an expected call of MongoSession
func (mr *MockStateMockRecorder) MongoSession() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MongoSession", reflect.TypeOf((*MockState)(nil).MongoSession))
}

// PrepareStoreCharmUpload mocks base method
func (m *MockState) PrepareStoreCharmUpload(arg0 *charm_v6.URL) (application.StateCharm, error) {
	ret := m.ctrl.Call(m, "PrepareStoreCharmUpload", arg0)
	ret0, _ := ret[0].(application.StateCharm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareStoreCharmUpload indicates an expected call of PrepareStoreCharmUpload
func (mr *MockStateMockRecorder) PrepareStoreCharmUpload(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareStoreCharmUpload", reflect.TypeOf((*MockState)(nil).PrepareStoreCharmUpload), arg0)
}

// UpdateUploadedCharm mocks base method
func (m *MockState) UpdateUploadedCharm(arg0 state.CharmInfo) (*state.Charm, error) {
	ret := m.ctrl.Call(m, "UpdateUploadedCharm", arg0)
	ret0, _ := ret[0].(*state.Charm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUploadedCharm indicates an expected call of UpdateUploadedCharm
func (mr *MockStateMockRecorder) UpdateUploadedCharm(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUploadedCharm", reflect.TypeOf((*MockState)(nil).UpdateUploadedCharm), arg0)
}
